{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\nconst notesAdapter = createEntityAdapter({\n  sortComparer: (a, b) => a.completed === b.completed ? 0 : a.completed ? 1 : -1\n});\nconst initialState = notesAdapter.getInitialState();\nexport const notesApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getNotes: builder.query({\n      query: () => '/notes',\n      validateStatus: (response, result) => {\n        return response.status === 200 && !result.isError;\n      },\n      transformResponse: responseData => {\n        const loadedNotes = responseData.map(note => {\n          note.id = note._id;\n          return note;\n        });\n        return notesAdapter.setAll(initialState, loadedNotes);\n      },\n      providesTags: (result, error, arg) => {\n        if (result !== null && result !== void 0 && result.ids) {\n          return [{\n            type: 'Note',\n            id: 'LIST'\n          }, ...result.ids.map(id => ({\n            type: 'Note',\n            id\n          }))];\n        } else return [{\n          type: 'Note',\n          id: 'LIST'\n        }];\n      }\n    }),\n    addNewNote: builder.mutation({\n      query: initialNote => ({\n        url: '/notes',\n        method: 'POST',\n        body: { ...initialNote\n        }\n      }),\n      invalidatesTags: [{\n        type: 'Note',\n        id: \"LIST\"\n      }]\n    }),\n    updateNote: builder.mutation({\n      query: initialNote => ({\n        url: '/notes',\n        method: 'PATCH',\n        body: { ...initialNote\n        }\n      }),\n      invalidatesTags: (result, error, arg) => [{\n        type: 'Note',\n        id: arg.id\n      }]\n    }),\n    deleteNote: builder.mutation({\n      query: _ref => {\n        let {\n          id\n        } = _ref;\n        return {\n          url: `/notes`,\n          method: 'DELETE',\n          body: {\n            id\n          }\n        };\n      },\n      invalidatesTags: (result, error, arg) => [{\n        type: 'Note',\n        id: arg.id\n      }]\n    })\n  })\n});\nexport const {\n  useGetNotesQuery,\n  useAddNewNoteMutation,\n  useUpdateNoteMutation,\n  useDeleteNoteMutation\n} = notesApiSlice; // returns the query result object\n\nexport const selectNotesResult = notesApiSlice.endpoints.getNotes.select(); // creates memoized selector\n\nconst selectNotesData = createSelector(selectNotesResult, notesResult => notesResult.data // normalized state object with ids & entities\n); //getSelectors creates these selectors and we rename them with aliases using destructuring\n\nexport const {\n  selectAll: selectAllNotes,\n  selectById: selectNoteById,\n  selectIds: selectNoteIds // Pass in a selector that returns the notes slice of state\n\n} = notesAdapter.getSelectors(state => {\n  var _selectNotesData;\n\n  return (_selectNotesData = selectNotesData(state)) !== null && _selectNotesData !== void 0 ? _selectNotesData : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","notesAdapter","sortComparer","a","b","completed","initialState","getInitialState","notesApiSlice","injectEndpoints","endpoints","builder","getNotes","query","validateStatus","response","result","status","isError","transformResponse","responseData","loadedNotes","map","note","id","_id","setAll","providesTags","error","arg","ids","type","addNewNote","mutation","initialNote","url","method","body","invalidatesTags","updateNote","deleteNote","useGetNotesQuery","useAddNewNoteMutation","useUpdateNoteMutation","useDeleteNoteMutation","selectNotesResult","select","selectNotesData","notesResult","data","selectAll","selectAllNotes","selectById","selectNoteById","selectIds","selectNoteIds","getSelectors","state"],"sources":["D:/Downloads/TechNotes/client/src/features/notes/notesApiSlice.js"],"sourcesContent":["import {\n    createSelector,\n    createEntityAdapter\n} from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\"\n\nconst notesAdapter = createEntityAdapter({\n    sortComparer: (a, b) => (a.completed === b.completed) ? 0 : a.completed ? 1 : -1\n})\n\nconst initialState = notesAdapter.getInitialState()\n\nexport const notesApiSlice = apiSlice.injectEndpoints({\n    endpoints: builder => ({\n        getNotes: builder.query({\n            query: () => '/notes',\n            validateStatus: (response, result) => {\n                return response.status === 200 && !result.isError\n            },\n            transformResponse: responseData => {\n                const loadedNotes = responseData.map(note => {\n                    note.id = note._id\n                    return note\n                });\n                return notesAdapter.setAll(initialState, loadedNotes)\n            },\n            providesTags: (result, error, arg) => {\n                if (result?.ids) {\n                    return [\n                        { type: 'Note', id: 'LIST' },\n                        ...result.ids.map(id => ({ type: 'Note', id }))\n                    ]\n                } else return [{ type: 'Note', id: 'LIST' }]\n            }\n        }),\n        addNewNote: builder.mutation({\n            query: initialNote => ({\n                url: '/notes',\n                method: 'POST',\n                body: {\n                    ...initialNote,\n                }\n            }),\n            invalidatesTags: [\n                { type: 'Note', id: \"LIST\" }\n            ]\n        }),\n        updateNote: builder.mutation({\n            query: initialNote => ({\n                url: '/notes',\n                method: 'PATCH',\n                body: {\n                    ...initialNote,\n                }\n            }),\n            invalidatesTags: (result, error, arg) => [\n                { type: 'Note', id: arg.id }\n            ]\n        }),\n        deleteNote: builder.mutation({\n            query: ({ id }) => ({\n                url: `/notes`,\n                method: 'DELETE',\n                body: { id }\n            }),\n            invalidatesTags: (result, error, arg) => [\n                { type: 'Note', id: arg.id }\n            ]\n        }),\n    }),\n})\n\nexport const {\n    useGetNotesQuery,\n    useAddNewNoteMutation,\n    useUpdateNoteMutation,\n    useDeleteNoteMutation,\n} = notesApiSlice\n\n// returns the query result object\nexport const selectNotesResult = notesApiSlice.endpoints.getNotes.select()\n\n// creates memoized selector\nconst selectNotesData = createSelector(\n    selectNotesResult,\n    notesResult => notesResult.data // normalized state object with ids & entities\n)\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n    selectAll: selectAllNotes,\n    selectById: selectNoteById,\n    selectIds: selectNoteIds\n    // Pass in a selector that returns the notes slice of state\n} = notesAdapter.getSelectors(state => selectNotesData(state) ?? initialState)"],"mappings":"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"},"metadata":{},"sourceType":"module"}