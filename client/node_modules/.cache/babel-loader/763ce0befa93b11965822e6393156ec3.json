{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\nconst usersAdapter = createEntityAdapter({});\nconst initialState = usersAdapter.getInitialState();\nexport const usersApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getUsers: builder.query({\n      query: () => '/users',\n      validateStatus: (response, result) => {\n        return response.status === 200 && !result.isError;\n      },\n      transformResponse: responseData => {\n        const loadedUsers = responseData.map(user => {\n          user.id = user._id;\n          return user;\n        });\n        return usersAdapter.setAll(initialState, loadedUsers);\n      },\n      providesTags: (result, error, arg) => {\n        if (result !== null && result !== void 0 && result.ids) {\n          return [{\n            type: 'User',\n            id: 'LIST'\n          }, ...result.ids.map(id => ({\n            type: 'User',\n            id\n          }))];\n        } else return [{\n          type: 'User',\n          id: 'LIST'\n        }];\n      }\n    }),\n    addNewUser: builder.mutation({\n      query: initialUserData => ({\n        url: '/users',\n        method: 'POST',\n        body: { ...initialUserData\n        }\n      }),\n      invalidatesTags: [{\n        type: 'User',\n        id: \"LIST\"\n      }]\n    }),\n    updateUser: builder.mutation({\n      query: initialUserData => ({\n        url: '/users',\n        method: 'PATCH',\n        body: { ...initialUserData\n        }\n      }),\n      invalidatesTags: (result, error, arg) => [{\n        type: 'User',\n        id: arg.id\n      }]\n    }),\n    deleteUser: builder.mutation({\n      query: _ref => {\n        let {\n          id\n        } = _ref;\n        return {\n          url: `/users`,\n          method: 'DELETE',\n          body: {\n            id\n          }\n        };\n      },\n      invalidatesTags: (result, error, arg) => [{\n        type: 'User',\n        id: arg.id\n      }]\n    })\n  })\n});\nexport const {\n  useGetUsersQuery,\n  useAddNewUserMutation,\n  useUpdateUserMutation,\n  useDeleteUserMutation\n} = usersApiSlice; // returns the query result object\n\nexport const selectUsersResult = usersApiSlice.endpoints.getUsers.select(); // creates memoized selector\n\nconst selectUsersData = createSelector(selectUsersResult, usersResult => usersResult.data // normalized state object with ids & entities\n); //getSelectors creates these selectors and we rename them with aliases using destructuring\n\nexport const {\n  selectAll: selectAllUsers,\n  selectById: selectUserById,\n  selectIds: selectUserIds // Pass in a selector that returns the users slice of state\n\n} = usersAdapter.getSelectors(state => {\n  var _selectUsersData;\n\n  return (_selectUsersData = selectUsersData(state)) !== null && _selectUsersData !== void 0 ? _selectUsersData : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","usersAdapter","initialState","getInitialState","usersApiSlice","injectEndpoints","endpoints","builder","getUsers","query","validateStatus","response","result","status","isError","transformResponse","responseData","loadedUsers","map","user","id","_id","setAll","providesTags","error","arg","ids","type","addNewUser","mutation","initialUserData","url","method","body","invalidatesTags","updateUser","deleteUser","useGetUsersQuery","useAddNewUserMutation","useUpdateUserMutation","useDeleteUserMutation","selectUsersResult","select","selectUsersData","usersResult","data","selectAll","selectAllUsers","selectById","selectUserById","selectIds","selectUserIds","getSelectors","state"],"sources":["D:/Downloads/TechNotes/client/src/features/users/usersApiSlice.js"],"sourcesContent":["import {\n    createSelector,\n    createEntityAdapter\n} from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\"\n\nconst usersAdapter = createEntityAdapter({})\n\nconst initialState = usersAdapter.getInitialState()\n\nexport const usersApiSlice = apiSlice.injectEndpoints({\n    endpoints: builder => ({\n        getUsers: builder.query({\n            query: () => '/users',\n            validateStatus: (response, result) => {\n                return response.status === 200 && !result.isError\n            },\n            transformResponse: responseData => {\n                const loadedUsers = responseData.map(user => {\n                    user.id = user._id\n                    return user\n                });\n                return usersAdapter.setAll(initialState, loadedUsers)\n            },\n            providesTags: (result, error, arg) => {\n                if (result?.ids) {\n                    return [\n                        { type: 'User', id: 'LIST' },\n                        ...result.ids.map(id => ({ type: 'User', id }))\n                    ]\n                } else return [{ type: 'User', id: 'LIST' }]\n            }\n        }),\n        addNewUser: builder.mutation({\n            query: initialUserData => ({\n                url: '/users',\n                method: 'POST',\n                body: {\n                    ...initialUserData,\n                }\n            }),\n            invalidatesTags: [\n                { type: 'User', id: \"LIST\" }\n            ]\n        }),\n        updateUser: builder.mutation({\n            query: initialUserData => ({\n                url: '/users',\n                method: 'PATCH',\n                body: {\n                    ...initialUserData,\n                }\n            }),\n            invalidatesTags: (result, error, arg) => [\n                { type: 'User', id: arg.id }\n            ]\n        }),\n        deleteUser: builder.mutation({\n            query: ({ id }) => ({\n                url: `/users`,\n                method: 'DELETE',\n                body: { id }\n            }),\n            invalidatesTags: (result, error, arg) => [\n                { type: 'User', id: arg.id }\n            ]\n        }),\n    }),\n})\n\nexport const {\n    useGetUsersQuery,\n    useAddNewUserMutation,\n    useUpdateUserMutation,\n    useDeleteUserMutation,\n} = usersApiSlice\n\n// returns the query result object\nexport const selectUsersResult = usersApiSlice.endpoints.getUsers.select()\n\n// creates memoized selector\nconst selectUsersData = createSelector(\n    selectUsersResult,\n    usersResult => usersResult.data // normalized state object with ids & entities\n)\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n    selectAll: selectAllUsers,\n    selectById: selectUserById,\n    selectIds: selectUserIds\n    // Pass in a selector that returns the users slice of state\n} = usersAdapter.getSelectors(state => selectUsersData(state) ?? initialState)"],"mappings":"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"},"metadata":{},"sourceType":"module"}